#!/usr/bin/env node

const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
require('dotenv').config();

// Import models
const User = require('./models/user.model');
const Project = require('./models/project.model');
const Task = require('./models/task.model');
const Team = require('./models/team.model');

// K·∫øt n·ªëi MongoDB
const connectDB = async () => {
  try {
    const dbUrl = process.env.DATABASE_URL || 'mongodb://localhost:27017/loop_application_db';
    await mongoose.connect(dbUrl);
    console.log('‚úÖ Connected to MongoDB:', dbUrl);
  } catch (error) {
    console.error('‚ùå MongoDB connection failed:', error);
    process.exit(1);
  }
};

// D·ªØ li·ªáu m·∫´u
const sampleData = {
  teams: [
    {
      name: 'Team Frontend',
      description: 'ƒê·ªôi ph√°t tri·ªÉn giao di·ªán ng∆∞·ªùi d√πng',
      avatar: null
    },
    {
      name: 'Team Backend', 
      description: 'ƒê·ªôi ph√°t tri·ªÉn h·ªá th·ªëng backend',
      avatar: null
    },
    {
      name: 'Team DevOps',
      description: 'ƒê·ªôi v·∫≠n h√†nh v√† tri·ªÉn khai h·ªá th·ªëng',
      avatar: null
    }
  ],
  
  users: [
    // Team Frontend (5 ng∆∞·ªùi)
    { fullName: 'Nguy·ªÖn VƒÉn An', email: 'nguyen.van.an@example.com', teamIndex: 0, role: 'owner' },
    { fullName: 'Tr·∫ßn Th·ªã B·∫£o', email: 'tran.thi.bao@example.com', teamIndex: 0, role: 'admin' },
    { fullName: 'L√™ Minh C∆∞·ªùng', email: 'le.minh.cuong@example.com', teamIndex: 0, role: 'member' },
    { fullName: 'Ph·∫°m Thu Dung', email: 'pham.thu.dung@example.com', teamIndex: 0, role: 'member' },
    { fullName: 'Ho√†ng VƒÉn Em', email: 'hoang.van.em@example.com', teamIndex: 0, role: 'member' },
    
    // Team Backend (5 ng∆∞·ªùi)
    { fullName: 'V≈© Th·ªã Ph∆∞∆°ng', email: 'vu.thi.phuong@example.com', teamIndex: 1, role: 'owner' },
    { fullName: 'ƒê·ªó Minh Quang', email: 'do.minh.quang@example.com', teamIndex: 1, role: 'admin' },
    { fullName: 'B√πi Thu H∆∞∆°ng', email: 'bui.thu.huong@example.com', teamIndex: 1, role: 'member' },
    { fullName: 'L√Ω VƒÉn H√πng', email: 'ly.van.hung@example.com', teamIndex: 1, role: 'member' },
    { fullName: 'Ng√¥ Th·ªã Lan', email: 'ngo.thi.lan@example.com', teamIndex: 1, role: 'member' },
    
    // Team DevOps (5 ng∆∞·ªùi)
    { fullName: 'Tr·ªãnh VƒÉn Ki√™n', email: 'trinh.van.kien@example.com', teamIndex: 2, role: 'owner' },
    { fullName: 'ƒêinh Th·ªã Mai', email: 'dinh.thi.mai@example.com', teamIndex: 2, role: 'admin' },
    { fullName: 'Phan Minh Nam', email: 'phan.minh.nam@example.com', teamIndex: 2, role: 'member' },
    { fullName: 'V√µ Thu Oanh', email: 'vo.thu.oanh@example.com', teamIndex: 2, role: 'member' },
    { fullName: 'ƒê·∫∑ng VƒÉn Ph√∫c', email: 'dang.van.phuc@example.com', teamIndex: 2, role: 'member' }
  ],

  projects: [
    // Team Frontend projects
    { 
      name: 'E-commerce Website', 
      description: 'X√¢y d·ª±ng website th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠',
      teamIndex: 0 
    },
    { 
      name: 'Mobile App UI', 
      description: 'Thi·∫øt k·∫ø giao di·ªán ·ª©ng d·ª•ng di ƒë·ªông',
      teamIndex: 0 
    },
    { 
      name: 'Admin Dashboard', 
      description: 'Trang qu·∫£n tr·ªã h·ªá th·ªëng',
      teamIndex: 0 
    },
    
    // Team Backend projects  
    { 
      name: 'API Gateway', 
      description: 'X√¢y d·ª±ng c·ªïng API trung t√¢m',
      teamIndex: 1 
    },
    { 
      name: 'Microservices', 
      description: 'Ph√°t tri·ªÉn ki·∫øn tr√∫c microservices',
      teamIndex: 1 
    },
    { 
      name: 'Database Optimization', 
      description: 'T·ªëi ∆∞u h√≥a c∆° s·ªü d·ªØ li·ªáu',
      teamIndex: 1 
    },
    { 
      name: 'Authentication Service', 
      description: 'D·ªãch v·ª• x√°c th·ª±c v√† ph√¢n quy·ªÅn',
      teamIndex: 1 
    },
    
    // Team DevOps projects
    { 
      name: 'CI/CD Pipeline', 
      description: 'X√¢y d·ª±ng pipeline t·ª± ƒë·ªông',
      teamIndex: 2 
    },
    { 
      name: 'Container Platform', 
      description: 'Tri·ªÉn khai n·ªÅn t·∫£ng container',
      teamIndex: 2 
    },
    { 
      name: 'Monitoring System', 
      description: 'H·ªá th·ªëng gi√°m s√°t v√† c·∫£nh b√°o',
      teamIndex: 2 
    }
  ],

  taskTemplates: [
    // Frontend tasks
    'Thi·∫øt k·∫ø giao di·ªán trang ch·ªß',
    'Implement responsive design',
    'T·ªëi ∆∞u h√≥a performance frontend',
    'Vi·∫øt unit test cho components',
    'Setup webpack configuration',
    'T√≠ch h·ª£p v·ªõi API backend',
    'Implement user authentication UI',
    'Thi·∫øt k·∫ø form validation',
    'Optimize bundle size',
    'Cross-browser testing',
    
    // Backend tasks
    'Thi·∫øt k·∫ø database schema',
    'Implement REST API endpoints',
    'Setup authentication middleware',
    'Vi·∫øt integration tests',
    'Optimize database queries',
    'Setup logging system',
    'Implement caching strategy',
    'API documentation',
    'Security vulnerability scan',
    'Performance monitoring',
    
    // DevOps tasks
    'Setup Docker containers',
    'Configure Kubernetes cluster',
    'Setup monitoring dashboard',
    'Implement CI/CD pipeline',
    'Database backup strategy',
    'Security hardening',
    'Load balancer configuration',
    'SSL certificate setup',
    'Log aggregation setup',
    'Disaster recovery plan'
  ]
};

// Utility functions
const getRandomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;
const getRandomElement = (array) => array[Math.floor(Math.random() * array.length)];
const getRandomDate = (start, end) => new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));

const statuses = ['created', 'assigned', 'pending', 'in_review', 'completed', 'closed'];
const flags = ['none', 'low', 'medium', 'high', 'priority'];

// T·∫°o d·ªØ li·ªáu
const createSampleData = async () => {
  try {
    console.log('üßπ Cleaning existing data...');
    await User.deleteMany({});
    await Team.deleteMany({});
    await Project.deleteMany({});
    await Task.deleteMany({});

    console.log('üë• Creating teams...');
    const teams = [];
    for (const teamData of sampleData.teams) {
      const team = await Team.create({
        name: teamData.name,
        description: teamData.description,
        avatar: teamData.avatar,
        member: [],
        project: [],
        createTime: new Date()
      });
      teams.push(team);
      console.log(`  ‚úÖ Created team: ${team.name}`);
    }

    console.log('üë§ Creating users...');
    const users = [];
    // Kh√¥ng hash m·∫≠t kh·∫©u ·ªü ƒë√¢y, ƒë·ªÉ User model middleware x·ª≠ l√Ω
    
    for (const userData of sampleData.users) {
      // T·∫°o username t·ª´ email (l·∫•y ph·∫ßn tr∆∞·ªõc @)
      const username = userData.email.split('@')[0];
      
      const user = await User.create({
        username: username,
        displayName: userData.fullName,
        email: userData.email,
        password: 'password123', // Plain text password, s·∫Ω ƒë∆∞·ª£c hash b·ªüi middleware
        createTime: new Date()
      });
      users.push({ ...user.toObject(), teamIndex: userData.teamIndex, role: userData.role });
      
      // Th√™m user v√†o team
      await Team.findByIdAndUpdate(
        teams[userData.teamIndex]._id,
        { $push: { 
          members: {
            member: user._id,
            role: userData.role,
            joined_date: new Date()
          }
        }}
      );
      
      console.log(`  ‚úÖ Created user: ${userData.fullName} (${teams[userData.teamIndex].name}) - Role: ${userData.role}`);
    }

    console.log('üìã Creating projects...');
    const projects = [];
    for (const projectData of sampleData.projects) {
      const teamMembers = users.filter(u => u.teamIndex === projectData.teamIndex);
      const project = await Project.create({
        name: projectData.name,
        description: projectData.description,
        assignedMembers: teamMembers.map(u => u._id),
        task: [],
        createTime: new Date()
      });
      projects.push({ ...project.toObject(), teamIndex: projectData.teamIndex });
      
      // Th√™m project v√†o team
      await Team.findByIdAndUpdate(
        teams[projectData.teamIndex]._id,
        { $push: { project: project._id } }
      );
      
      console.log(`  ‚úÖ Created project: ${project.name}`);
    }

    console.log('üìù Creating tasks...');
    const now = new Date();
    const twoMonthsAgo = new Date(now.getTime() - 60 * 24 * 60 * 60 * 1000); // 60 ng√†y tr∆∞·ªõc
    
    let totalTasks = 0;
    for (const project of projects) {
      const teamMembers = users.filter(u => u.teamIndex === project.teamIndex);
      const projectTasks = [];
      
      // T·∫°o tasks cho 60 ng√†y
      for (let day = 0; day < 60; day++) {
        const currentDate = new Date(twoMonthsAgo.getTime() + day * 24 * 60 * 60 * 1000);
        const tasksPerDay = getRandomInt(0, 7);
        
        for (let i = 0; i < tasksPerDay; i++) {
          const assignee = getRandomElement(teamMembers);
          const status = getRandomElement(statuses);
          const flag = getRandomElement(flags);
          const title = getRandomElement(sampleData.taskTemplates);
          
          // T·∫°o th·ªùi gian ng·∫´u nhi√™n trong ng√†y
          const createTime = new Date(currentDate);
          createTime.setHours(getRandomInt(8, 18), getRandomInt(0, 59), getRandomInt(0, 59));
          
          // T√≠nh th·ªùi gian ƒë√≥ng n·∫øu task ƒë√£ ho√†n th√†nh
          let closeTime = null;
          if (status === 'completed' || status === 'closed') {
            const daysToComplete = getRandomInt(1, 14); // 1-14 ng√†y ƒë·ªÉ ho√†n th√†nh
            closeTime = new Date(createTime.getTime() + daysToComplete * 24 * 60 * 60 * 1000);
          }
          
          // T·∫°o logs cho task
          const logs = [
            {
              action: 'created',
              timestamp: createTime,
              performedBy: assignee._id,
              details: 'Task created'
            }
          ];
          
          if (status !== 'created') {
            logs.push({
              action: 'assigned',
              timestamp: new Date(createTime.getTime() + 60000), // 1 ph√∫t sau
              performedBy: assignee._id,
              details: 'Task assigned'
            });
          }
          
          if (status === 'pending') {
            logs.push({
              action: 'pending',
              timestamp: new Date(createTime.getTime() + getRandomInt(3600000, 86400000)), // 1-24h sau
              performedBy: assignee._id,
              details: 'Changed status to pending'
            });
          }
          
          if (status === 'in_review') {
            logs.push({
              action: 'in_review',
              timestamp: new Date(createTime.getTime() + getRandomInt(3600000, 86400000)),
              performedBy: assignee._id,
              details: 'Changed status to in_review'
            });
          }
          
          if (status === 'completed' || status === 'closed') {
            logs.push({
              action: 'completed',
              timestamp: closeTime,
              performedBy: assignee._id,
              details: 'Task completed'
            });
          }

          const task = await Task.create({
            title: `${title} - ${project.name}`,
            description: `Chi ti·∫øt th·ª±c hi·ªán ${title.toLowerCase()} cho d·ª± √°n ${project.name}`,
            deadline: new Date(createTime.getTime() + getRandomInt(7, 30) * 24 * 60 * 60 * 1000), // 7-30 ng√†y deadline
            status: status,
            flag: flag,
            assignee: assignee._id,
            subtasks: [],
            attachments: [],
            createTime: createTime,
            closeTime: closeTime,
            logs: logs
          });
          
          projectTasks.push(task._id);
          totalTasks++;
        }
      }
      
      // C·∫≠p nh·∫≠t project v·ªõi danh s√°ch tasks
      await Project.findByIdAndUpdate(
        project._id,
        { task: projectTasks }
      );
      
      console.log(`  ‚úÖ Created ${projectTasks.length} tasks for project: ${project.name}`);
    }

    console.log('\nüéâ Sample data creation completed!');
    console.log(`üìä Summary:`);
    console.log(`  - Teams: ${teams.length}`);
    console.log(`  - Users: ${users.length}`);
    console.log(`  - Projects: ${projects.length}`);
    console.log(`  - Tasks: ${totalTasks}`);
    
    console.log('\nüìã Team distribution:');
    for (let i = 0; i < teams.length; i++) {
      const teamUsers = users.filter(u => u.teamIndex === i);
      const teamProjects = projects.filter(p => p.teamIndex === i);
      console.log(`  - ${teams[i].name}: ${teamUsers.length} users, ${teamProjects.length} projects`);
    }

    console.log('\nüîë Default credentials:');
    console.log('  - Email: [any user email from above]');
    console.log('  - Password: password123');
    
    console.log('\nüí° Example API calls:');
    console.log('  - Get project statistics: GET /task/statistics/{projectId}');
    console.log('  - Debug member stats: GET /task/debug/members/{projectId}');

  } catch (error) {
    console.error('‚ùå Error creating sample data:', error);
    throw error;
  }
};

// H√†m ch·∫°y ch√≠nh
const main = async () => {
  try {
    await connectDB();
    await createSampleData();
    console.log('\n‚úÖ Setup completed successfully!');
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Setup failed:', error);
    process.exit(1);
  }
};

// Ch·∫°y n·∫øu file ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
  main();
}

module.exports = {
  createSampleData,
  connectDB
};
