const mongoose = require('mongoose');
const User = require('./models/user.model');
const Task = require('./models/task.model');
const bcrypt = require('bcryptjs');

// K·∫øt n·ªëi MongoDB
mongoose.connect('mongodb://localhost:27017/loop_db', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
.then(() => console.log('‚úÖ Connected to MongoDB'))
.catch(err => console.error('‚ùå MongoDB connection error:', err));

// T·∫°o d·ªØ li·ªáu m·∫´u phong ph√∫ cho th·ªëng k√™
async function createRichSampleData() {
  try {
    console.log('üöÄ Creating rich sample data for statistics...');
    
    // X√≥a d·ªØ li·ªáu c≈©
    await User.deleteMany({});
    await Task.deleteMany({});
    
    // T·∫°o user m·∫´u
    const hashedPassword = await bcrypt.hash('123456', 10);
    const user = new User({
      username: 'testuser',
      email: 'test@example.com',
      displayName: 'Test User',
      password: hashedPassword
    });
    await user.save();
    console.log('‚úÖ Created user:', user.displayName);
    
    // T·∫°o nhi·ªám v·ª• c√° nh√¢n ƒëa d·∫°ng
    const personalTasks = [];
    
    // T·∫°o 100 nhi·ªám v·ª• c√° nh√¢n v·ªõi d·ªØ li·ªáu ƒëa d·∫°ng
    for (let i = 0; i < 100; i++) {
      const createTime = generateCreatedDate(i);
      const task = {
        title: generateTaskTitle(i),
        description: generateTaskDescription(i),
        status: generateWeightedStatus(), // Tr·∫°ng th√°i c√≥ tr·ªçng s·ªë
        flag: generateWeightedFlag(), // ∆Øu ti√™n c√≥ tr·ªçng s·ªë
        deadline: generateDeadline(i),
        createTime: createTime, // Th√™m tr∆∞·ªùng b·∫Øt bu·ªôc
        attachments: Math.random() > 0.7 ? ['file1.pdf', 'file2.docx'] : [],
        logs: [{
          action: 'created',
          timestamp: createTime,
          performedBy: user._id,
          details: 'Personal task created'
        }]
      };
      personalTasks.push(task);
    }
    
    // T·∫°o m·ªôt s·ªë nhi·ªám v·ª• nh√≥m v·ªõi assignee
    for (let i = 0; i < 20; i++) {
      const createTime = new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000);
      const task = {
        title: `Team Task ${i + 1}`,
        description: `Team task description ${i + 1}`,
        status: ['created', 'assigned', 'pending', 'in_review', 'completed', 'closed'][Math.floor(Math.random() * 6)],
        flag: ['none', 'low', 'medium', 'high', 'priority'][Math.floor(Math.random() * 5)],
        deadline: new Date(Date.now() + Math.random() * 30 * 24 * 60 * 60 * 1000),
        createTime: createTime,
        assignee: user._id, // Nhi·ªám v·ª• nh√≥m c√≥ assignee
        attachments: [],
        logs: [{
          action: 'created',
          timestamp: createTime,
          performedBy: user._id,
          details: 'Team task created'
        }]
      };
      personalTasks.push(task);
    }
    
    // L∆∞u t·∫•t c·∫£ tasks
    await Task.insertMany(personalTasks);
    console.log(`‚úÖ Created ${personalTasks.length} tasks`);
    
    // Hi·ªÉn th·ªã th·ªëng k√™
    await displayStatistics();
    
  } catch (error) {
    console.error('‚ùå Error creating sample data:', error);
  }
}

// T·∫°o title ƒëa d·∫°ng
function generateTaskTitle(index) {
  const types = [
    'Ph√°t tri·ªÉn', 'Ki·ªÉm th·ª≠', 'Thi·∫øt k·∫ø', 'T√†i li·ªáu', 'Nghi√™n c·ª©u',
    'Coding', 'Debug', 'Review', 'UI Design', 'API Development',
    'Testing', 'Documentation', 'Research', 'Planning', 'Meeting'
  ];
  const subjects = [
    'Login Module', 'Dashboard', 'API Endpoint', 'Database Schema',
    'User Interface', 'Mobile App', 'Web Service', 'Authentication',
    'Data Migration', 'Performance Optimization', 'Security Audit',
    'Code Review', 'System Architecture', 'Project Planning'
  ];
  
  const type = types[index % types.length];
  const subject = subjects[index % subjects.length];
  return `${type} - ${subject} ${index + 1}`;
}

// T·∫°o description ƒëa d·∫°ng
function generateTaskDescription(index) {
  const descriptions = [
    'Th·ª±c hi·ªán ph√°t tri·ªÉn t√≠nh nƒÉng m·ªõi cho h·ªá th·ªëng qu·∫£n l√Ω nhi·ªám v·ª•',
    'Ki·ªÉm th·ª≠ v√† t√¨m l·ªói trong module ƒëƒÉng nh·∫≠p c·ªßa ·ª©ng d·ª•ng',
    'Thi·∫øt k·∫ø giao di·ªán ng∆∞·ªùi d√πng cho trang dashboard ch√≠nh',
    'Vi·∫øt t√†i li·ªáu h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng cho ng∆∞·ªùi d√πng cu·ªëi',
    'Nghi√™n c·ª©u v√† ƒë√°nh gi√° c√¥ng ngh·ªá m·ªõi ph√π h·ª£p v·ªõi d·ª± √°n',
    'Implement new authentication system with JWT tokens',
    'Debug performance issues in the main application',
    'Create responsive design for mobile devices',
    'Write unit tests for critical business logic',
    'Optimize database queries for better performance',
    'Conduct security audit for the entire system',
    'Review and merge pull requests from team members',
    'Plan and estimate tasks for the upcoming sprint',
    'Integrate third-party APIs for enhanced functionality',
    'Refactor legacy code to improve maintainability'
  ];
  
  const base = descriptions[index % descriptions.length];
  const complexity = Math.floor(Math.random() * 3);
  
  if (complexity === 0) {
    return base;
  } else if (complexity === 1) {
    return base + ' C·∫ßn ph·ªëi h·ª£p v·ªõi team kh√°c v√† c√≥ deadline g·∫•p.';
  } else {
    return base + ' ƒê√¢y l√† nhi·ªám v·ª• ph·ª©c t·∫°p ƒë√≤i h·ªèi nghi√™n c·ª©u s√¢u, ph·ªëi h·ª£p nhi·ªÅu b·ªô ph·∫≠n v√† c√≥ th·ªÉ ·∫£nh h∆∞·ªüng ƒë·∫øn to√†n b·ªô h·ªá th·ªëng. C·∫ßn th·ª±c hi·ªán theo t·ª´ng giai ƒëo·∫°n v√† c√≥ k·∫ø ho·∫°ch rollback.';
  }
}

// T·∫°o tr·∫°ng th√°i c√≥ tr·ªçng s·ªë (realistic distribution)
function generateWeightedStatus() {
  const weights = [
    { status: 'created', weight: 10 },    // M·ªõi t·∫°o
    { status: 'assigned', weight: 15 },   // ƒê√£ giao
    { status: 'completed', weight: 40 },  // Ho√†n th√†nh
    { status: 'pending', weight: 20 },    // ƒêang l√†m
    { status: 'in_review', weight: 10 },  // Xem x√©t
    { status: 'closed', weight: 5 }       // ƒê√≥ng
  ];
  
  const totalWeight = weights.reduce((sum, item) => sum + item.weight, 0);
  let random = Math.random() * totalWeight;
  
  for (const item of weights) {
    random -= item.weight;
    if (random <= 0) {
      return item.status;
    }
  }
  return 'created';
}

// T·∫°o ∆∞u ti√™n c√≥ tr·ªçng s·ªë
function generateWeightedFlag() {
  const weights = [
    { flag: 'none', weight: 30 },     // Kh√¥ng c√≥
    { flag: 'low', weight: 25 },      // Th·∫•p
    { flag: 'medium', weight: 25 },   // Trung b√¨nh
    { flag: 'high', weight: 15 },     // Cao
    { flag: 'priority', weight: 5 }   // ∆Øu ti√™n
  ];
  
  const totalWeight = weights.reduce((sum, item) => sum + item.weight, 0);
  let random = Math.random() * totalWeight;
  
  for (const item of weights) {
    random -= item.weight;
    if (random <= 0) {
      return item.flag;
    }
  }
  return 'none';
}

// T·∫°o deadline ƒëa d·∫°ng
function generateDeadline(index) {
  const now = new Date();
  const options = [
    // H√¥m nay
    new Date(now.getFullYear(), now.getMonth(), now.getDate(), 23, 59, 59),
    // Ng√†y mai
    new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1, 23, 59, 59),
    // Tu·∫ßn n√†y
    new Date(now.getTime() + Math.random() * 7 * 24 * 60 * 60 * 1000),
    // Th√°ng n√†y
    new Date(now.getTime() + Math.random() * 30 * 24 * 60 * 60 * 1000),
    // Sau th√°ng n√†y
    new Date(now.getTime() + (30 + Math.random() * 90) * 24 * 60 * 60 * 1000),
    // Qu√° kh·ª© (qu√° h·∫°n)
    new Date(now.getTime() - Math.random() * 30 * 24 * 60 * 60 * 1000)
  ];
  
  const weights = [5, 8, 25, 35, 20, 7]; // Tr·ªçng s·ªë cho c√°c kho·∫£ng th·ªùi gian
  const totalWeight = weights.reduce((sum, w) => sum + w, 0);
  let random = Math.random() * totalWeight;
  
  for (let i = 0; i < weights.length; i++) {
    random -= weights[i];
    if (random <= 0) {
      return options[i];
    }
  }
  
  return options[0];
}

// T·∫°o ng√†y t·∫°o
function generateCreatedDate(index) {
  const now = new Date();
  return new Date(now.getTime() - Math.random() * 90 * 24 * 60 * 60 * 1000);
}

// Hi·ªÉn th·ªã th·ªëng k√™
async function displayStatistics() {
  try {
    console.log('\nüìä STATISTICS SUMMARY:');
    console.log('=' * 50);
    
    const totalTasks = await Task.countDocuments();
    const personalTasks = await Task.countDocuments({ assignee: null }); // Kh√¥ng c√≥ assignee = c√° nh√¢n
    const teamTasks = await Task.countDocuments({ assignee: { $ne: null } }); // C√≥ assignee = nh√≥m
    
    console.log(`üìã Total Tasks: ${totalTasks}`);
    console.log(`üë§ Personal Tasks: ${personalTasks}`);
    console.log(`üë• Team Tasks: ${teamTasks}`);
    
    // Th·ªëng k√™ theo tr·∫°ng th√°i
    console.log('\nüìà STATUS DISTRIBUTION:');
    const statusStats = await Task.aggregate([
      { $match: { assignee: null } }, // Ch·ªâ nhi·ªám v·ª• c√° nh√¢n
      { $group: { _id: '$status', count: { $sum: 1 } } },
      { $sort: { _id: 1 } }
    ]);
    
    const statusNames = {
      'created': 'M·ªõi t·∫°o',
      'assigned': 'ƒê√£ giao',
      'pending': 'ƒêang l√†m',
      'in_review': 'Xem x√©t',
      'completed': 'Ho√†n th√†nh',
      'closed': 'ƒê√≥ng'
    };
    statusStats.forEach(stat => {
      const name = statusNames[stat._id] || 'Unknown';
      console.log(`  ${name}: ${stat.count}`);
    });
    
    // Th·ªëng k√™ theo ∆∞u ti√™n
    console.log('\nüö© PRIORITY DISTRIBUTION:');
    const priorityStats = await Task.aggregate([
      { $match: { assignee: null } }, // Ch·ªâ nhi·ªám v·ª• c√° nh√¢n
      { $group: { _id: '$flag', count: { $sum: 1 } } },
      { $sort: { _id: 1 } }
    ]);
    
    const priorityNames = {
      'none': 'Kh√¥ng c√≥',
      'low': 'Th·∫•p',
      'medium': 'Trung b√¨nh',
      'high': 'Cao',
      'priority': '∆Øu ti√™n'
    };
    priorityStats.forEach(stat => {
      const name = priorityNames[stat._id] || 'Unknown';
      console.log(`  ${name}: ${stat.count}`);
    });
    
    // Th·ªëng k√™ theo danh m·ª•c (b·ªè qua v√¨ backend kh√¥ng c√≥ category)
    console.log('\nüìÇ CATEGORY DISTRIBUTION:');
    console.log('  (Backend schema does not have category field)');
    
    // Th·ªëng k√™ theo th·ªùi h·∫°n
    console.log('\n‚è∞ DEADLINE DISTRIBUTION:');
    const now = new Date();
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    const tomorrow = new Date(today.getTime() + 24 * 60 * 60 * 1000);
    const nextWeek = new Date(today.getTime() + 7 * 24 * 60 * 60 * 1000);
    const nextMonth = new Date(today.getTime() + 30 * 24 * 60 * 60 * 1000);
    
    const deadlineToday = await Task.countDocuments({ 
      assignee: null,
      deadline: { $gte: today, $lt: tomorrow }
    });
    
    const deadlineTomorrow = await Task.countDocuments({ 
      assignee: null,
      deadline: { $gte: tomorrow, $lt: new Date(tomorrow.getTime() + 24 * 60 * 60 * 1000) }
    });
    
    const deadlineThisWeek = await Task.countDocuments({ 
      assignee: null,
      deadline: { $gte: tomorrow, $lt: nextWeek }
    });
    
    const deadlineThisMonth = await Task.countDocuments({ 
      assignee: null,
      deadline: { $gte: nextWeek, $lt: nextMonth }
    });
    
    const deadlineOverdue = await Task.countDocuments({ 
      assignee: null,
      deadline: { $lt: today }
    });
    
    console.log(`  H√¥m nay: ${deadlineToday}`);
    console.log(`  Ng√†y mai: ${deadlineTomorrow}`);
    console.log(`  Tu·∫ßn n√†y: ${deadlineThisWeek}`);
    console.log(`  Th√°ng n√†y: ${deadlineThisMonth}`);
    console.log(`  Qu√° h·∫°n: ${deadlineOverdue}`);
    
    // T·ª∑ l·ªá ho√†n th√†nh
    const completedTasks = await Task.countDocuments({ assignee: null, status: 'completed' });
    const completionRate = personalTasks > 0 ? ((completedTasks / personalTasks) * 100).toFixed(1) : '0.0';
    console.log(`\n‚úÖ COMPLETION RATE: ${completionRate}%`);
    
    // Nhi·ªám v·ª• c√≥ attachment
    const tasksWithAttachment = await Task.countDocuments({ 
      assignee: null,
      attachments: { $exists: true, $ne: [] }
    });
    console.log(`üìé Tasks with attachments: ${tasksWithAttachment}`);
    
    // Nhi·ªám v·ª• c√≥ description
    const tasksWithDescription = await Task.countDocuments({ 
      assignee: null,
      description: { $exists: true, $ne: null, $ne: '' }
    });
    console.log(`üìù Tasks with description: ${tasksWithDescription}`);
    
    console.log('\n‚úÖ Sample data created successfully!');
    console.log('üéØ You can now test the personal statistics widgets in Flutter app');
    
  } catch (error) {
    console.error('‚ùå Error displaying statistics:', error);
  }
}

// Ch·∫°y script
if (require.main === module) {
  createRichSampleData()
    .then(() => {
      console.log('\nüéâ Rich sample data creation completed!');
      process.exit(0);
    })
    .catch(error => {
      console.error('‚ùå Script failed:', error);
      process.exit(1);
    });
}

module.exports = { createRichSampleData };
